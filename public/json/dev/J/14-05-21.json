{"url":"/dev/J/14-05-21","markdown":"\n\n### [/cahut](/cahut)\n\n<div style=\"text-align:center\"> \n\n# [Journal](.)\n\n## 14/05/21 \n\n<span style=\"float:left\"> [01-04-21](01-04-21) </span>  .\n<span style=\"float:right\"> [15-05-21](15-05-21) </span>\n\n***\n<div style=\" word-spacing: 10px;\">\n\n[cahut](/cahut) [R2](/R2)  [tuto](https://arthur.cahut.net/tuto) \n[dev/](/dev/)\n\n***\n</div>\n\n</div>\n\nOK\n\nj'ai fini le taf à l'usine, j'ai 1000euro de côté, de quoi vivre sans travailler quelques temps  ; je me remets à cahut.net\n\nje vais essayer d'y passer les deux prochaines semaines assez serieusement\n\nl'objectif ça va être une sorte de refonte par rapport à mes reflexions recentes, à savoir, aller vers un veritable \"éditeur html\", avec la possibilité (j'espère) de pouvoir integrer du javascript, editer les headers de la page, etc...\n\nil faut pour autant que la \"refonte\" soit compatible avec le système existant, pour ça je suis assez certain d'avoir trouvé la bonne idée : \n\nactuellement, ce que l'editeur entre sur cahut est retravaillé par markdown, est fait pour être du markdown, mon idée c'est que ce système déjà existant puisse etre retrouvé au sein d'une div qui aurait la classe markdown (par exemple)\n\npour la refonte, il faut que je fasse le point des differentes options d'implementation qui me sont venues recement...\n\nil me semble que l'idée qui me trotte le plus dans la tete c'est l'utilisation d'un iframe d'edition (contenant de façon editable tout le code de la page cible) par dessus la page réelle\n\nglobalement l'idée c'est que cahut puisse servir à editer à 100% les fichiers qu'il sert, de façon à pouvoir écrire aussi bien un fichier css qu'un fichier html, javascript, txt, etc...\n\nBref, je crois que j'ai tout dans l'idée, reste sa réalisation, il, va, falloir, ouvrir, vscode... :)\n\n\nbeaucoup de question à se poser, j'ai vraiment du boulot...\n\ngarder vue.js ?\n\nres render ?\n\nil faut servir les fichiers de la façon la plus brutale possible par defaut (full statique)<br> \n(implique la regeneration en mode statique de tout les fichiers existants, se debarasser (enfin) des fichiers json)\n\nun premier chantier ça va du coup être ça : <br>\nfabriquer la page par defaut, dans laquelle s'inserera les contenu dejà existant, \n\nun modele de \"page vide\", pré-inclure un \"css par defaut\" (celui déjà existant à priori), un système js de base pour garder la fonctionnalité markdown\n\n \n\n\n\n****\n\npuis, \n\nsi connecté...\n\n\nlà attention ça se gate, je ne suis pas certain à 100% de ce qui est le mieux, alors je vais y aller à taton.\n\ndéjà il faudra faire une route, et voir sous quelle forme y réagir, y répondre, réutiliser le res render ?\n\ndans un premier temps, je pense que je vais essayer de faire un simple editeur de texte, en iframe sur la page, mais la beaucoup de questions se posent...\n\nactuellement un des gros problèmes de cahut c'est le fait qu'on puisse \"casser\" une page, par exemple avec des problèmes de syntaxe, ou juste la balise script, et quand la page est cassée meme la fonctionnalité d'edition est bloquée, donc impossible de reparer ce qui est cassé, ça il faut à tout prix l'eviter... <br>\n\ndonc je dois reflechir à separer l'editeur et le contenu de façon vraiment intelligente, à priori l'idée c'est que quand on est connecté le \"contenu\" de la page deviennent un iframe (si l'iframe est cassé le reste de la page reste fonctionnel)\n\n\n<br>\nje dois reflechir à comment interfacer la zone d'edition et le contenu (actuellement geré par vuejs, mais pas sur que ça soit toujours possible \"après\")\n\nen gros comment, par quoi, par quel mecanisme, ce qui est entré dans l'editeur \"textuel\" est \"rendu\" en la forme finale de la page web, quel traitement et à quel niveau (markdown rendering), autre point, la sauvegarde du \"markdown\" et/ou du html transformé...<br> \naprès avoir regardé dans le vide pendant environ 15mn à ce sujet, avoir demandé à adèle conseil, j'en viens à la conclusion qu'il ne faut pas trop se prendre le chou à ce sujet... <br> \n(idée 1 : le système de conversion du markdown en html fait partie du \"contenu\" par defaut que propose cahut (au meme titre que le fichier css de base) il ne fait pas partie de la \"machine\" qu'est cahut)<br>\n(idée 2 : l'inverse)\n\n\n\n****\n\naussi, rappel de la part d'adèle que la version actuelle a de vrai avantages de simplicité d'utilisation, il faudra que la mise à jour offre surtout accès à un \"mode avancé\" (pas obligatoire)\n\n****\n***\n\ny'avait aussi l'idée API ???<br>\nzut j'y pensais plus à ça, ça peut être gerable\n\nen gros l'api ça sera pour le \"mode connecté\"\n\n\n***\n\nutilisation intelligente du fichier static \"public\", integration du système de file-upload à tout ce qui est public (çàd presque tout à part les trucs \"nodejs\"\n\n\n\n****\n\n\n### liste des routes, middleware actuellement definis :\n\n  * express.static\n  * passport (plusieurs trucs, un peu bordelique, pas bien geré)\n  * express session / json\n  * le middleware qui nettoie les url\n  * le middleware qui teste si un fichier existe déjà, gere le truc en ram, mmm, je sais plus trop en quoi il est hyper necessaire\n  * app.post login + app get logout\n  * app delete, get, post, put /files/*\n  * get /*\n  * post /*\n\n\nil va falloir que plus de choses passent par static, d'ailleur je me demande si ça me permettrait pas de me passer du middleware qui teste si un truc existe déjà\n\n<style>\n\n\n\nhtml {\nfont-size:16px;\n}\n\n\n\n#content {\n  font-size: 1.5em;\n  padding: 30px;\n  margin: 60px auto;\n  color:blue;\n  background-color:white;\n}\na { \n  background-color : blue;\n  color:white;\n  text-decoration-line: underline;\n  text-decoration-style: dotted;\n}\na:hover {\n  background-color : white;\n  color:blue;\n  \n  text-decoration-line: underline;\n  text-decoration-style: solid;\n}\n\nhr {\n  border: 1px solid blue;\n}\n\nbody {\n  background-color : blue;\n  font-size : 1em;\n}\n\n#meta-div {\n    top : unset;\n    bottom : 4%;\n}\n\n.meta-button {\n    color: blue;\n    background-color : white;\n}\n\n.meta-button:hover {\n  background-color:blue;\n  color:white;\n}\n\n\n</style>","html":"<h3 id=\"cahut\"><a href=\"/cahut\">/cahut</a></h3>\n<div style=\"text-align:center\"> \n\n<h1 id=\"journal\"><a href=\".\">Journal</a></h1>\n<h2 id=\"140521\">14/05/21</h2>\n<p><span style=\"float:left\"> <a href=\"01-04-21\">01-04-21</a> </span>  .\n<span style=\"float:right\"> <a href=\"15-05-21\">15-05-21</a> </span></p>\n<hr>\n<div style=\" word-spacing: 10px;\">\n\n<p><a href=\"/cahut\">cahut</a> <a href=\"/R2\">R2</a>  <a href=\"https://arthur.cahut.net/tuto\">tuto</a> \n<a href=\"/dev/\">dev/</a></p>\n<hr>\n</div>\n\n</div>\n\n<p>OK</p>\n<p>j&#39;ai fini le taf à l&#39;usine, j&#39;ai 1000euro de côté, de quoi vivre sans travailler quelques temps  ; je me remets à cahut.net</p>\n<p>je vais essayer d&#39;y passer les deux prochaines semaines assez serieusement</p>\n<p>l&#39;objectif ça va être une sorte de refonte par rapport à mes reflexions recentes, à savoir, aller vers un veritable &quot;éditeur html&quot;, avec la possibilité (j&#39;espère) de pouvoir integrer du javascript, editer les headers de la page, etc...</p>\n<p>il faut pour autant que la &quot;refonte&quot; soit compatible avec le système existant, pour ça je suis assez certain d&#39;avoir trouvé la bonne idée : </p>\n<p>actuellement, ce que l&#39;editeur entre sur cahut est retravaillé par markdown, est fait pour être du markdown, mon idée c&#39;est que ce système déjà existant puisse etre retrouvé au sein d&#39;une div qui aurait la classe markdown (par exemple)</p>\n<p>pour la refonte, il faut que je fasse le point des differentes options d&#39;implementation qui me sont venues recement...</p>\n<p>il me semble que l&#39;idée qui me trotte le plus dans la tete c&#39;est l&#39;utilisation d&#39;un iframe d&#39;edition (contenant de façon editable tout le code de la page cible) par dessus la page réelle</p>\n<p>globalement l&#39;idée c&#39;est que cahut puisse servir à editer à 100% les fichiers qu&#39;il sert, de façon à pouvoir écrire aussi bien un fichier css qu&#39;un fichier html, javascript, txt, etc...</p>\n<p>Bref, je crois que j&#39;ai tout dans l&#39;idée, reste sa réalisation, il, va, falloir, ouvrir, vscode... :)</p>\n<p>beaucoup de question à se poser, j&#39;ai vraiment du boulot...</p>\n<p>garder vue.js ?</p>\n<p>res render ?</p>\n<p>il faut servir les fichiers de la façon la plus brutale possible par defaut (full statique)<br> \n(implique la regeneration en mode statique de tout les fichiers existants, se debarasser (enfin) des fichiers json)</p>\n<p>un premier chantier ça va du coup être ça : <br>\nfabriquer la page par defaut, dans laquelle s&#39;inserera les contenu dejà existant, </p>\n<p>un modele de &quot;page vide&quot;, pré-inclure un &quot;css par defaut&quot; (celui déjà existant à priori), un système js de base pour garder la fonctionnalité markdown</p>\n<hr>\n<p>puis, </p>\n<p>si connecté...</p>\n<p>là attention ça se gate, je ne suis pas certain à 100% de ce qui est le mieux, alors je vais y aller à taton.</p>\n<p>déjà il faudra faire une route, et voir sous quelle forme y réagir, y répondre, réutiliser le res render ?</p>\n<p>dans un premier temps, je pense que je vais essayer de faire un simple editeur de texte, en iframe sur la page, mais la beaucoup de questions se posent...</p>\n<p>actuellement un des gros problèmes de cahut c&#39;est le fait qu&#39;on puisse &quot;casser&quot; une page, par exemple avec des problèmes de syntaxe, ou juste la balise script, et quand la page est cassée meme la fonctionnalité d&#39;edition est bloquée, donc impossible de reparer ce qui est cassé, ça il faut à tout prix l&#39;eviter... <br></p>\n<p>donc je dois reflechir à separer l&#39;editeur et le contenu de façon vraiment intelligente, à priori l&#39;idée c&#39;est que quand on est connecté le &quot;contenu&quot; de la page deviennent un iframe (si l&#39;iframe est cassé le reste de la page reste fonctionnel)</p>\n<br>\nje dois reflechir à comment interfacer la zone d'edition et le contenu (actuellement geré par vuejs, mais pas sur que ça soit toujours possible \"après\")\n\n<p>en gros comment, par quoi, par quel mecanisme, ce qui est entré dans l&#39;editeur &quot;textuel&quot; est &quot;rendu&quot; en la forme finale de la page web, quel traitement et à quel niveau (markdown rendering), autre point, la sauvegarde du &quot;markdown&quot; et/ou du html transformé...<br> \naprès avoir regardé dans le vide pendant environ 15mn à ce sujet, avoir demandé à adèle conseil, j&#39;en viens à la conclusion qu&#39;il ne faut pas trop se prendre le chou à ce sujet... <br> \n(idée 1 : le système de conversion du markdown en html fait partie du &quot;contenu&quot; par defaut que propose cahut (au meme titre que le fichier css de base) il ne fait pas partie de la &quot;machine&quot; qu&#39;est cahut)<br>\n(idée 2 : l&#39;inverse)</p>\n<hr>\n<p>aussi, rappel de la part d&#39;adèle que la version actuelle a de vrai avantages de simplicité d&#39;utilisation, il faudra que la mise à jour offre surtout accès à un &quot;mode avancé&quot; (pas obligatoire)</p>\n<hr>\n<hr>\n<p>y&#39;avait aussi l&#39;idée API ???<br>\nzut j&#39;y pensais plus à ça, ça peut être gerable</p>\n<p>en gros l&#39;api ça sera pour le &quot;mode connecté&quot;</p>\n<hr>\n<p>utilisation intelligente du fichier static &quot;public&quot;, integration du système de file-upload à tout ce qui est public (çàd presque tout à part les trucs &quot;nodejs&quot;</p>\n<hr>\n<h3 id=\"liste-des-routes-middleware-actuellement-definis-\">liste des routes, middleware actuellement definis :</h3>\n<ul>\n<li>express.static</li>\n<li>passport (plusieurs trucs, un peu bordelique, pas bien geré)</li>\n<li>express session / json</li>\n<li>le middleware qui nettoie les url</li>\n<li>le middleware qui teste si un fichier existe déjà, gere le truc en ram, mmm, je sais plus trop en quoi il est hyper necessaire</li>\n<li>app.post login + app get logout</li>\n<li>app delete, get, post, put /files/*</li>\n<li>get /*</li>\n<li>post /*</li>\n</ul>\n<p>il va falloir que plus de choses passent par static, d&#39;ailleur je me demande si ça me permettrait pas de me passer du middleware qui teste si un truc existe déjà</p>\n<style>\n\n\n\nhtml {\nfont-size:16px;\n}\n\n\n\n#content {\n  font-size: 1.5em;\n  padding: 30px;\n  margin: 60px auto;\n  color:blue;\n  background-color:white;\n}\na { \n  background-color : blue;\n  color:white;\n  text-decoration-line: underline;\n  text-decoration-style: dotted;\n}\na:hover {\n  background-color : white;\n  color:blue;\n  \n  text-decoration-line: underline;\n  text-decoration-style: solid;\n}\n\nhr {\n  border: 1px solid blue;\n}\n\nbody {\n  background-color : blue;\n  font-size : 1em;\n}\n\n#meta-div {\n    top : unset;\n    bottom : 4%;\n}\n\n.meta-button {\n    color: blue;\n    background-color : white;\n}\n\n.meta-button:hover {\n  background-color:blue;\n  color:white;\n}\n\n\n</style>","nothing":1}
