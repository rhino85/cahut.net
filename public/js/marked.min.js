/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/marked@1.0.0/src/marked.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const Lexer=require("./Lexer.js"),Parser=require("./Parser.js"),Tokenizer=require("./Tokenizer.js"),Renderer=require("./Renderer.js"),TextRenderer=require("./TextRenderer.js"),Slugger=require("./Slugger.js"),{merge:merge,checkSanitizeDeprecation:checkSanitizeDeprecation,escape:escape}=require("./helpers.js"),{getDefaults:getDefaults,changeDefaults:changeDefaults,defaults:defaults}=require("./defaults.js");function marked(e,r,t){if(null==e)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof e)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected");if(t||"function"==typeof r){t||(t=r,r=null),r=merge({},marked.defaults,r||{}),checkSanitizeDeprecation(r);const n=r.highlight;let a,s,i=0;try{a=Lexer.lex(e,r)}catch(e){return t(e)}s=a.length;const d=function(e){if(e)return r.highlight=n,t(e);let s;try{s=Parser.parse(a,r)}catch(r){e=r}return r.highlight=n,e?t(e):t(null,s)};if(!n||n.length<3)return d();if(delete r.highlight,!s)return d();for(;i<a.length;i++)!function(e){"code"!==e.type?--s||d():n(e.text,e.lang,function(r,t){return r?d(r):null==t||t===e.text?--s||d():(e.text=t,e.escaped=!0,void(--s||d()))})}(a[i])}else try{return r=merge({},marked.defaults,r||{}),checkSanitizeDeprecation(r),Parser.parse(Lexer.lex(e,r),r)}catch(e){if(e.message+="\nPlease report this to https://github.com/markedjs/marked.",(r||marked.defaults).silent)return"<p>An error occurred:</p><pre>"+escape(e.message+"",!0)+"</pre>";throw e}}marked.options=marked.setOptions=function(e){return merge(marked.defaults,e),changeDefaults(marked.defaults),marked},marked.getDefaults=getDefaults,marked.defaults=defaults,marked.use=function(e){const r=merge({},e);if(e.renderer){const t=marked.defaults.renderer||new Renderer;for(const r in e.renderer){const n=t[r];t[r]=((...a)=>{let s=e.renderer[r].apply(t,a);return!1===s&&(s=n.apply(t,a)),s})}r.renderer=t}if(e.tokenizer){const t=marked.defaults.tokenizer||new Tokenizer;for(const r in e.tokenizer){const n=t[r];t[r]=((...a)=>{let s=e.tokenizer[r].apply(t,a);return!1===s&&(s=n.apply(t,a)),s})}r.tokenizer=t}marked.setOptions(r)},marked.Parser=Parser,marked.parser=Parser.parse,marked.Renderer=Renderer,marked.TextRenderer=TextRenderer,marked.Lexer=Lexer,marked.lexer=Lexer.lex,marked.Tokenizer=Tokenizer,marked.Slugger=Slugger,marked.parse=marked,module.exports=marked;
//# sourceMappingURL=/sm/283eb553a1575c8eaaff4c46c5b9771b26824cf088bf4f41d321a8359d2e9761.map