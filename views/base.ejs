<!DOCTYPE html>
<html>
  <head>
    <title>!</title>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script> 
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="/js/dompurify.js"></script>
    <link rel="stylesheet" type="text/css" href="/css/style.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">


    <script type="text/x-template" id="login-template">

        <form
          id="login-form"
          @submit="connect"
          novalidate="true"
        >
        <div>
          <input type="text" name="username" v-model="user"/>
          <br/>
        </div>
        <div>
          <input type="password" name="password" v-model="password"/>
        </div>
        <input class="button"
          type="submit"
          value="connect"
        >
        </form>
        
  </script>
  </head>
  <body>
    <div id="app" >
      <div id="content" v-html="html"></div>
      <div id="textinput" v-if="showEditor">
        <textarea id="textarea" :value="markdown" @input="editorUpdate" ref="textarea" v-bind:style="syncState" ></textarea>
      </div>
      <div  id="meta-div">
        <login-component v-if="showLogin" @connected="connected"></login-component>
        <span id="meta-button" type="button" class="button" v-if="!showLogin"@click="meta">{{buttontext}}</span>
      </div>

      
    </div>
    
    <script>
      var user = <%-JSON.stringify(user)%>;
      var data = <%-JSON.stringify(data)%>;
      console.log(data);
      console.log(user);
      
      var logsession = Vue.component('login-component', {
        data: function () {
            return {
              user:null,
              password:null
            }
        },
        template: "#login-template",
        
        methods: {
          connect: function(e) {
            var self = this;
            fetch("/login", {
              method: 'post',
              headers: {
               'Accept': 'application/json, text/plain, */*',
               'Content-Type': 'application/json'
              },
              body: JSON.stringify({username:this.user, password:this.password})
              }).then(function(response) {
                return response.json();
              }).then(function(data){
                if(data.connected){
                  console.log(data);
                  self.$emit('connected');
                }
              });
             e.preventDefault();

          }

        }
      })

      var vueApp = new Vue({
        el: "#app",
        data: {
          toShowEditor: 1,
          showLogin : 0,
          isConnected : user,
          markdown : data.markdown,
          html : data.html,
          syncState:{
            background : "white"
          }
        },
        computed: {
          buttontext : function(){
            if(!this.isConnected){
              return "connect";
            } else {
              return "editor";
            }
          },
          showEditor : function(){
            if(this.isConnected && this.toShowEditor){

              return 1;
            }
            else{
              return 0;
            }
          }
        },
        methods: {
          editorUpdate:function(e){
            this.syncState.background = "rgb(255, 130, 130)";
            this.markdown = e.target.value;
            this.html = DOMPurify.sanitize(marked(this.markdown));

            this.submit();
          },
          submit: function() {
            fetch('', {
              method: 'post',
              headers: {
               'Accept': 'application/json, text/plain, */*',
               'Content-Type': 'application/json'
              },
              body: JSON.stringify({html:this.html, markdown:this.markdown})
             }).then((response) => {
                return response.json();
              }).then((data) => {
                  console.log(data.state);
                  if(data.state=="saved"){
                    this.syncState.background = "white";
                    this.syncState.transition = "0.3s";
                  }
              });
          }, 
          connected: function(){
            this.isConnected=1;
            this.showLogin = 0;
          },
          meta: function(){
            console.log("meta button click "+ this.isConnected);
            if(!this.isConnected){
              
              this.showLogin = !this.showLogin ;

            }
            else if(1) {
              this.toShowEditor = !this.toShowEditor;
              this.$nextTick(() => this.$refs.textarea.focus());
            }
          }
        }
        });
    </script>
  </body>
</html>